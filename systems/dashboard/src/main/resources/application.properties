# Configuration file
# key = value
# application level
%dev.pipeline.enabled=false
pipeline.enabled=true
# you need following env var
# cors.origin : URL to all frontend UI required to accedd this service
# pipeline.el : depoyment pipline event listener URL
# build.pipeline.el : build pipline event listener URL

# Quarkus level
quarkus.devservices.enabled=true
quarkus.kubernetes-client.trust-certs=true

quarkus.container-image.builder=jib
quarkus.container-image.registry=quay.io
quarkus.container-image.group=wael2000
quarkus.container-image.tag=latest
quarkus.container-image.username=wael2000+demo
quarkus.container-image.password=0GMWZKSXJBTBQ8X6HSFIOIN0MGIMMCJV0HD2YH56B7BCXB4CPQOZO781RQYMYUYJ
quarkus.jib.base-jvm-image=registry.access.redhat.com/ubi8/openjdk-11-runtime:1.20-1
#quarkus.jib.always-cache-base-image=false
#quarkus.jib.base-image-layers-cache=target
#quarkus.jib.application-layers-cache=target
#quarkus.container-image.image=mc
#quarkus.openshift.base-jvm-image=ubi8/openjdk-11-runtime
#quarkus.container-image.builder=podman



%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=postgres@postgresqlserver-fsi
%prod.quarkus.datasource.password=C0mplexP@ssw0rd
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgresql:5432/fsi


quarkus.datasource.jdbc.min-size=1
quarkus.datasource.jdbc.max-size=2

# drop and create the database at startup (use `update` to only update the schema)
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.sql-load-script=import.sql
# production, init containers will pre-load the data
quarkus.hibernate-orm.database.generation=update

quarkus.hibernate-orm.log.sql=true

%dev.quarkus.http.port=8090
quarkus.http.port=8080

quarkus.http.cors=true

#%dev.quarkus.http.cors.origins=http://localhost:8080,http://el-battalion-event-listener-command-post.apps.cluster-zzmdz.dynamic.opentlc.com
# cors.origin env var
#quarkus.http.cors.origins=${cors.origin}
quarkus.http.cors.origins=/.*/
%dev.quarkus.http.cors.origins=/.*/

%dev.org.redhat.services.PipelineProxyService/mp-rest/url=http://el-battalion-team-event-listener-mc-datacenter.apps.cluster-pv5p5.dynamic.redhatworkshops.io
# pipeline.el env var for service PipelineProxyService
org.redhat.services.PipelineProxyService/mp-rest/url=${pipeline.el}

%dev.org.redhat.services.OpsPipelineProxyService/mp-rest/url=http://el-battalion-ops-mc-datacenter.apps.cluster-pv5p5.dynamic.redhatworkshops.io
# ops.pipeline.el env var for service PipelineProxyService
org.redhat.services.OpsPipelineProxyService/mp-rest/url=${ops.pipeline.el}


%dev.org.redhat.services.AzurePipelineProxyService/mp-rest/url=http://el-azure-mc-datacenter.apps.cluster-pv5p5.dynamic.redhatworkshops.io
# ops.pipeline.el env var for service PipelineProxyService
org.redhat.services.AzurePipelineProxyService/mp-rest/url=${azure.pipeline.el}

%dev.org.redhat.services.BuildPipelineProxyService/mp-rest/url=http://el-bubble-event-listener-demo-cicd.apps.cluster-qjtjg.dynamic.opentlc.com
# build.pipeline.el env var for service BuildPipelineProxyService
org.redhat.services.BuildPipelineProxyService/mp-rest/url=${build.pipeline.el}